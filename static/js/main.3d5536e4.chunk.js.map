{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["ButtonStyled","styled","Button","p","isCompleted","css","Todo","todo","onCheckBtnclick","shouldFitContainer","iconAfter","className","onClick","id","primaryColor","name","todoList","map","TODO_APP_STORAGE_KEY","App","useState","setTodoList","textInput","setTextInput","useEffect","storagedTodoList","localStorage","getItem","JSON","parse","setItem","stringify","onTextInputChange","useCallback","e","target","value","onAddBtnClick","v4","prevState","placeholder","elemAfterInput","isDisabled","appearance","padding","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAKMA,EAAeC,YAAOC,IAAPD,CAAH,qTAMZ,SAACE,GAAD,OACAA,EAAEC,aACFC,YADA,sGAuBS,SAASC,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,gBACnC,OACE,cAACR,EAAD,CACEI,YAAaG,EAAKH,YAClBK,oBAAkB,EAClBC,WACGH,EAAKH,aACJ,sBAAMO,UAAU,aAAaC,QAAS,kBAAMJ,EAAgBD,EAAKM,KAAjE,SACE,cAAC,IAAD,CAAWC,aAAa,cANhC,SAWGP,EAAKQ,OC7CG,SAASC,EAAT,GAAkD,IAA9BA,EAA6B,EAA7BA,SAAUR,EAAmB,EAAnBA,gBAC3C,OACE,mCACGQ,EAASC,KAAI,SAACV,GAAD,OACZ,cAACD,EAAD,CAAoBC,KAAMA,EAAMC,gBAAiBA,GAAtCD,EAAKM,S,oBCDlBK,EAAuB,WAkEdC,MAhEf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOJ,EAAP,KAAiBK,EAAjB,KACA,EAAkCD,mBAAS,IAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAmBC,aAAaC,QAAQT,GAC1CO,GACFJ,EAAYO,KAAKC,MAAMJ,MAExB,IAEHD,qBAAU,WACRE,aAAaI,QAAQZ,EAAsBU,KAAKG,UAAUf,MACzD,CAACA,IAEJ,IAAMgB,EAAoBC,uBAAY,SAACC,GACrCX,EAAaW,EAAEC,OAAOC,SACrB,IAEGC,EAAgBJ,uBACpB,SAACC,GAECb,EAAY,CACV,CAAER,GAAIyB,cAAMvB,KAAMO,EAAWlB,aAAa,IADjC,mBAENY,KAGLO,EAAa,MAEf,CAACD,EAAWN,IAGRR,EAAkByB,uBAAY,SAACpB,GACnCQ,GAAY,SAACkB,GAAD,OACVA,EAAUtB,KAAI,SAACV,GAAD,OACZA,EAAKM,KAAOA,EAAZ,2BAAsBN,GAAtB,IAA4BH,aAAa,IAASG,UAGrD,IAEH,OACE,qCACE,uCACA,cAAC,IAAD,CACEQ,KAAK,WACLyB,YAAY,eACZC,eACE,cAAC,IAAD,CACEC,YAAapB,EACbqB,WAAW,UACX/B,QAASyB,EAHX,iBAQFhC,IAAK,CAAEuC,QAAS,eAChBR,MAAOd,EACPuB,SAAUb,IAEZ,cAAC,EAAD,CAAUhB,SAAUA,EAAUR,gBAAiBA,QC7DrDsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3d5536e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@atlaskit/button\";\r\nimport styled, { css } from \"styled-components\";\r\nimport CheckIcon from \"@atlaskit/icon/glyph/check\";\r\n\r\nconst ButtonStyled = styled(Button)`\r\n  margin-top: 5px;\r\n  text-align: left;\r\n\r\n  &,\r\n  &:hover {\r\n    ${(p) =>\r\n      p.isCompleted &&\r\n      css`\r\n        text-decoration: line-through;\r\n        color: #000000;\r\n      `}\r\n  }\r\n\r\n  &:hover {\r\n    .check-icon {\r\n      display: inline-block;\r\n    }\r\n  }\r\n\r\n  .check-icon {\r\n    display: none;\r\n\r\n    &:hover {\r\n      background-color: #e2e2e2;\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Todo({ todo, onCheckBtnclick }) {\r\n  return (\r\n    <ButtonStyled\r\n      isCompleted={todo.isCompleted}\r\n      shouldFitContainer\r\n      iconAfter={\r\n        !todo.isCompleted && (\r\n          <span className=\"check-icon\" onClick={() => onCheckBtnclick(todo.id)}>\r\n            <CheckIcon primaryColor=\"#4fff4f\" />\r\n          </span>\r\n        )\r\n      }\r\n    >\r\n      {todo.name}\r\n    </ButtonStyled>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nexport default function todoList({ todoList, onCheckBtnclick }) {\r\n  return (\r\n    <>\r\n      {todoList.map((todo) => (\r\n        <Todo key={todo.id} todo={todo} onCheckBtnclick={onCheckBtnclick} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import TodoList from \"./components/TodoList\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Button from \"@atlaskit/button\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { v4 } from \"uuid\";\n\nconst TODO_APP_STORAGE_KEY = \"TODO_APP\";\n\nfunction App() {\n  const [todoList, setTodoList] = useState([]);\n  const [textInput, setTextInput] = useState(\"\");\n\n  useEffect(() => {\n    const storagedTodoList = localStorage.getItem(TODO_APP_STORAGE_KEY);\n    if (storagedTodoList) {\n      setTodoList(JSON.parse(storagedTodoList));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(TODO_APP_STORAGE_KEY, JSON.stringify(todoList));\n  }, [todoList]);\n\n  const onTextInputChange = useCallback((e) => {\n    setTextInput(e.target.value);\n  }, []);\n\n  const onAddBtnClick = useCallback(\n    (e) => {\n      //add input text\n      setTodoList([\n        { id: v4(), name: textInput, isCompleted: false },\n        ...todoList,\n      ]);\n\n      setTextInput(\"\");\n    },\n    [textInput, todoList]\n  );\n\n  const onCheckBtnclick = useCallback((id) => {\n    setTodoList((prevState) =>\n      prevState.map((todo) =>\n        todo.id === id ? { ...todo, isCompleted: true } : todo\n      )\n    );\n  }, []);\n\n  return (\n    <>\n      <h3>To Do</h3>\n      <Textfield\n        name=\"add-todo\"\n        placeholder=\"Add todo....\"\n        elemAfterInput={\n          <Button\n            isDisabled={!textInput}\n            appearance=\"primary\"\n            onClick={onAddBtnClick}\n          >\n            Add\n          </Button>\n        }\n        css={{ padding: \"2px 4px 2px\" }}\n        value={textInput}\n        onChange={onTextInputChange}\n      ></Textfield>\n      <TodoList todoList={todoList} onCheckBtnclick={onCheckBtnclick} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}